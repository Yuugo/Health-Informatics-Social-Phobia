{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf370
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 GUI Test:\
\
One of the demands of the project was that it needed to be coded by the test-driven-development rules. That means that all code should be tested including GUIs. For standard Unit testing the team found that NUnit was quite helpful, but for explicit GUI testing no suitable tool was found that was compatible with Visual Studio Express. Because the team valued automated GUI testing very highly, the team decided it was worth the effort that an own testing suite should be developed. The implementation excessively uses reflection to communicate with the to be tested GUI, for verifying and button clicking etc. The downside of using reflection, it depends on the name of the component that is being tested. So code inspection in required and if the name of the component is changed, the test no longer works. There also the name has to be changed.}